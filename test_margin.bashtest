This is an example with the margin! and additional comments!

    $ cd ./testsuit/statutil && python ../../bashtest.py -v *.bashtest
    Trying:
        run('ls testsuit/')
    Expecting:
        foo.py  main.py
        <BLANKLINE>
    ok
    Trying:
        run('./stat.sh testsuit/')
    Expecting:
        Evaluate *.py statistics
        PYTHON FILES:        2
        PYTHON LINES:        4
        <BLANKLINE>
    ok
    Trying:
        run('./stat.sh')
    Expecting:
        Evaluate *.py statistics
        PYTHON FILES:        3
        PYTHON LINES:        8
        <BLANKLINE>
    ok
    1 items passed all tests:
       3 tests in tests.bashtest
    3 tests in 1 items.
    3 passed and 0 failed.
    Test passed.

This is just text. It will be ignored!

    $ cat ./testsuit/nginx.log | cut -f3 -d ' ' | sort | uniq -c | sort -g -r
       5 92.248.130.149
       3 50.112.95.211
       3 109.173.101.89
       2 54.251.34.67
       2 54.248.250.232
       2 184.73.237.85
       1 54.247.188.179

Another example!

The best test is:

    $ python ./bashtest.py --help
    usage: bashtest.py [-h] [--exitcode] [-v] [-q] [--debug] [--version]
                       file [file ...]

    BashTest is a UNIX command-line tool for running text-based bash tests.

    positional arguments:
      file           Input file

    optional arguments:
      -h, --help     show this help message and exit
      --exitcode     Print exitcode after command end of output
      -v, --verbose  Verbose output mode
      -q, --quiet    Silent output mode
      --debug        Print the debug information
      --version      Print the version string

    $ python ./bashtest.py --help
    usage: bashtest.py [-h] [--exitcode] [-v] [-q] [--debug] [--version]
                       file [file ...]

    BashTest is a UNIX command-line tool for running text-based bash tests.

    positional arguments:
      file           Input file

    optional arguments:
      -h, --help     show this help message and exit
      --exitcode     Print exitcode after command end of output
      -v, --verbose  Verbose output mode
      -q, --quiet    Silent output mode
      --debug        Print the debug information
      --version      Print the version string

eof!